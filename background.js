// Background script for Irys Typing Bot
// Coordinates communication between popup and content script

class BackgroundController {
  constructor() {
    this.state = {
      isRunning: false,
      currentGame: 0,
      totalGames: 0,
      settings: null,
      processingGameEnd: false
    };

    this.initializeListeners();
  }

  initializeListeners() {
    // Listen for messages from popup and content script
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
      this.handleMessage(message, sender, sendResponse);
      return true; // Keep message channel open for async responses
    });

    // Handle extension icon click - ensure we're on the right site
    chrome.action.onClicked.addListener(async (tab) => {
      if (!tab.url.includes('spritetype.irys.xyz')) {
        console.log('Background: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ spritetype.irys.xyz –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∫–æ–Ω–∫—É');
        await chrome.tabs.update(tab.id, { url: 'https://spritetype.irys.xyz/' });
      }
    });
  }

  async handleMessage(message, sender, sendResponse) {
    switch (message.type) {
      case 'GET_STATE':
        sendResponse(this.state);
        break;

      case 'START_AUTOMATION':
        await this.startAutomation(message.settings);
        sendResponse({ success: true });
        break;

      case 'STOP_AUTOMATION':
        await this.stopAutomation();
        sendResponse({ success: true });
        break;

      case 'CONTENT_READY':
        console.log('Background: Content script is ready');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        const savedState = await chrome.storage.local.get('gameState');

        if (savedState.gameState && savedState.gameState.isRunning) {
          console.log('Background: –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É:', savedState.gameState);

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ background
          this.state.isRunning = savedState.gameState.isRunning;
          this.state.currentGame = savedState.gameState.currentGame;
          this.state.totalGames = savedState.gameState.totalGames;
          this.state.settings = savedState.gameState.settings;
          this.state.automationStarted = true; // –í–∞–∂–Ω–æ! –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—É—é

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ content script
          setTimeout(() => {
            this.sendToContentScript({
              type: 'RESTORE_AUTOMATION',
              gameState: savedState.gameState
            });
          }, 1000); // –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É

        } else if (this.state.isRunning && this.state.settings && !this.state.automationStarted) {
          // –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
          console.log('Background: Starting automation after content script ready');
          this.state.automationStarted = true; // Prevent multiple starts
          setTimeout(() => {
            this.sendToContentScript({
              type: 'START_AUTOMATION',
              settings: this.state.settings
            });
          }, 500);
        }

        sendResponse({ success: true });
        break;

      case 'TYPE_CHARACTER':
        // –ò–°–ü–û–õ–¨–ó–£–ï–ú DEBUGGER API –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –†–ï–ê–õ–¨–ù–´–• –°–û–ë–´–¢–ò–ô
        await this.handleTypeCharacter(message.character, sender.tab.id);
        sendResponse({ success: true });
        break;

      case 'TYPE_BACKSPACE':
        // –ò–°–ü–û–õ–¨–ó–£–ï–ú DEBUGGER API –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò BACKSPACE
        await this.handleTypeBackspace(sender.tab.id);
        sendResponse({ success: true });
        break;

      case 'PROGRESS_UPDATE':
        this.updateProgress(message);
        break;

      case 'AUTOMATION_COMPLETE':
        this.handleAutomationComplete();
        break;

      case 'ERROR_NOTIFICATION':
        this.handleErrorNotification(message.errorInfo);
        break;

      case 'GAME_ENDED':
        this.handleGameEnded(message);
        sendResponse({ success: true });
        break;

      case 'NEXT_GAME_STARTED':
        this.handleNextGameStarted();
        sendResponse({ success: true });
        break;

      case 'AUTOMATION_RESTORE_READY':
        this.handleAutomationRestoreReady(message);
        sendResponse({ success: true });
        break;

      case 'AUTOMATION_ERROR':
        this.handleAutomationError(message);
        sendResponse({ success: true });
        break;

      default:
        console.log('Unknown message type:', message.type);
    }
  }

  async startAutomation(settings) {
    console.log('Background: Starting automation with settings:', settings);

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ê–ï–ú –°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú
    console.log('üßπ –û–ß–ò–°–¢–ö–ê —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...');
    await chrome.storage.local.clear();
    console.log('‚úÖ Storage –æ—á–∏—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞');

    // Reset automation state flags
    this.state.automationStarted = false;

    this.state.isRunning = true;
    this.state.currentGame = 1;
    this.state.totalGames = settings.gameCount;
    this.state.settings = settings;

    console.log(`üéÆ –ù–û–í–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø: –∏–≥—Ä–∞ ${this.state.currentGame} –∏–∑ ${this.state.totalGames}`);

    // Ensure we're on the correct site
    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
    const currentTab = tabs[0];

    // Store the tab ID for later use
    this.state.targetTabId = currentTab.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–∞–π—Ç–µ
    const targetUrl = 'https://spritetype.irys.xyz/';
    const isOnTargetSite = currentTab.url && currentTab.url.includes('spritetype.irys.xyz');

    if (!isOnTargetSite) {
      console.log('Background: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–∞–π—Ç:', targetUrl);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º popup –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      this.sendToPopup({
        type: 'PROGRESS_UPDATE',
        currentGame: this.state.currentGame,
        totalGames: this.state.totalGames,
        status: '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ spritetype.irys.xyz...'
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–∞–π—Ç
      await chrome.tabs.update(currentTab.id, { url: targetUrl });

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.waitForPageLoad(currentTab.id);

    } else {
      // Always refresh the page before starting automation to ensure clean state
      console.log('Background: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');

      this.sendToPopup({
        type: 'PROGRESS_UPDATE',
        currentGame: this.state.currentGame,
        totalGames: this.state.totalGames,
        status: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ...'
      });

      await chrome.tabs.reload(currentTab.id);
      await this.waitForPageLoad(currentTab.id);
    }

    // Notify popup
    this.sendToPopup({
      type: 'PROGRESS_UPDATE',
      currentGame: this.state.currentGame,
      totalGames: this.state.totalGames,
      status: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã...'
    });

    // Note: We now wait for CONTENT_READY message instead of using setTimeout
    console.log('Background: Waiting for content script to be ready...');
  }

  async stopAutomation() {
    console.log('Background: Stopping automation, current state:', this.state);
    this.state.isRunning = false;
    this.state.automationStarted = false; // Reset flag for next start
    this.state.processingGameEnd = false; // Reset game end processing flag

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ê–ï–ú –í–°–ï –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï
    console.log('üßπ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê chrome.storage.local...');
    await chrome.storage.local.clear();
    console.log('‚úÖ Storage –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.state.currentGame = 0;
    this.state.totalGames = 0;
    this.state.settings = null;

    // Send stop message to content script
    this.sendToContentScript({ type: 'STOP_AUTOMATION' });

    // Notify popup
    this.sendToPopup({ type: 'AUTOMATION_STOPPED' });
  }

  updateProgress(message) {
    // –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º this.state.currentGame –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π!
    // –°—á–µ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ handleGameCompleted

    // Forward to popup
    this.sendToPopup({
      type: 'PROGRESS_UPDATE',
      currentGame: this.state.currentGame, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–ê–®–ï –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
      totalGames: this.state.totalGames,
      status: message.status
    });
  }

  handleAutomationComplete() {
    this.state.isRunning = false;
    this.sendToPopup({ type: 'AUTOMATION_COMPLETE' });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
   */
  handleGameEnded(message) {
    console.log('üéØ Background: handleGameEnded –í–´–ó–í–ê–ù - –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.message);
    console.log(`üéØ Background: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π - currentGame: ${this.state.currentGame}, isRunning: ${this.state.isRunning}, processingGameEnd: ${this.state.processingGameEnd}`);

    if (!this.state.isRunning) {
      console.log('‚ùå Background: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã');
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π
    console.log('‚ñ∂Ô∏è Background: –í—ã–∑—ã–≤–∞–µ–º handleGameCompleted...');
    this.handleGameCompleted();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–≥—Ä—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π
   */
  async handleGameCompleted() {
    console.log('üîç Background: handleGameCompleted –ù–ê–ß–ê–õ–û - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å...');
    console.log(`üîç Background: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - currentGame: ${this.state.currentGame}, totalGames: ${this.state.totalGames}, isRunning: ${this.state.isRunning}, processingGameEnd: ${this.state.processingGameEnd}`);

    if (!this.state.isRunning) {
      console.log('‚ùå Background: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
      return;
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if (this.state.processingGameEnd) {
      console.log('‚ö†Ô∏è Background: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤');
      return;
    }

    this.state.processingGameEnd = true;
    console.log('üîí Background: –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É processingGameEnd = true');

    try {
      console.log(`üìä Background: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–≥—Ä–∞ ${this.state.currentGame} –∏–∑ ${this.state.totalGames}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä (–ë–ï–ó —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞)
      if (this.state.currentGame >= this.state.totalGames) {
        console.log('üèÅ Background: –í—Å–µ –∏–≥—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
        this.state.isRunning = false;

        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await chrome.storage.local.remove('gameState');

        // –£–≤–µ–¥–æ–º–ª—è–µ–º popup –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö –∏–≥—Ä
        this.sendToPopup({
          type: 'AUTOMATION_COMPLETE',
          message: `–ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ ${this.state.totalGames} –∏–≥—Ä(—ã)`
        });

        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.state.currentGame = 0;
        this.state.totalGames = 0;
        this.state.settings = null;

        return;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å, –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ
      const oldGame = this.state.currentGame;
      this.state.currentGame++;
      console.log(`‚û°Ô∏è Background: –£–í–ï–õ–ò–ß–ò–õ–ò —Å—á–µ—Ç—á–∏–∫ —Å ${oldGame} –Ω–∞ ${this.state.currentGame}`);
      console.log(`üéÆ Background: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ ${this.state.currentGame} –∏–∑ ${this.state.totalGames}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      this.sendToPopup({
        type: 'PROGRESS_UPDATE',
        currentGame: this.state.currentGame,
        totalGames: this.state.totalGames,
        status: `–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã ${this.state.currentGame} –∏–∑ ${this.state.totalGames}`
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await chrome.storage.local.set({
        gameState: {
          isRunning: true,
          currentGame: this.state.currentGame,
          totalGames: this.state.totalGames,
          settings: this.state.settings
        }
      });

      console.log('üíæ Background: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, content script –∑–∞–ø—É—Å—Ç–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É...');

    } finally {
      // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        console.log('üîì Background: –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É processingGameEnd —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã');
        this.state.processingGameEnd = false;
      }, 2000);
    }
  }

  /**
   * Handle error notifications from content script
   * Requirements: 5.4 - Centralized error notifications to popup
   * @param {Object} errorInfo - Error information object
   */
  handleErrorNotification(errorInfo) {
    console.log('Background: Error notification received:', errorInfo);

    // Forward error notification to popup
    this.sendToPopup({
      type: 'ERROR_NOTIFICATION',
      errorInfo: errorInfo
    });

    // If error is critical and not recoverable, stop automation
    if (!errorInfo.recoverable && this.state.isRunning) {
      console.warn('Background: Critical error detected, stopping automation due to:', errorInfo.message);
      this.handleAutomationError({
        error: errorInfo.message,
        currentGame: this.state.currentGame
      });
    }
  }

  /**
   * –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  async waitForPageLoad(tabId) {
    return new Promise((resolve) => {
      const checkComplete = () => {
        chrome.tabs.get(tabId, (tab) => {
          if (chrome.runtime.lastError) {
            console.warn('Background: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∫–ª–∞–¥–∫–µ:', chrome.runtime.lastError);
            resolve();
            return;
          }

          if (tab.status === 'complete') {
            console.log('Background: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
            setTimeout(resolve, 1500);
          } else {
            console.log('Background: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
            setTimeout(checkComplete, 500);
          }
        });
      };

      checkComplete();
    });
  }

  async sendToContentScript(message) {
    try {
      // Use stored tab ID if available
      if (this.state.targetTabId) {
        console.log('Background: Sending message to content script:', message.type, 'Tab ID:', this.state.targetTabId);
        try {
          const response = await chrome.tabs.sendMessage(this.state.targetTabId, message);
          console.log('Background: Content script response:', response);
          return;
        } catch (error) {
          console.warn('Background: Failed to send to stored tab ID, trying fallback:', error.message);
        }
      }

      // Fallback: First try to find the spritetype.irys.xyz tab specifically
      const spriteTabs = await chrome.tabs.query({ url: 'https://spritetype.irys.xyz/*' });

      if (spriteTabs.length > 0) {
        const targetTab = spriteTabs[0];
        console.log('Background: Sending message to content script:', message.type, 'Tab:', targetTab.url);
        const response = await chrome.tabs.sendMessage(targetTab.id, message);
        console.log('Background: Content script response:', response);
      } else {
        // Final fallback to active tab
        const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
        console.log('Background: No spritetype tab found, using active tab:', tabs[0]?.url);
        if (tabs[0]) {
          const response = await chrome.tabs.sendMessage(tabs[0].id, message);
          console.log('Background: Content script response:', response);
        } else {
          console.error('Background: No active tab found');
        }
      }
    } catch (error) {
      console.error('Failed to send message to content script:', error);
    }
  }

  async sendToPopup(message) {
    try {
      await chrome.runtime.sendMessage(message);
    } catch (error) {
      // Popup might be closed, that's okay
      console.log('Popup not available for message:', message.type);
    }
  }

  /**
   * –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –†–ï–ê–õ–¨–ù–´–ï –°–û–ë–´–¢–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ –ß–ï–†–ï–ó DEBUGGER API
   */
  async handleTypeCharacter(character, tabId) {
    try {
      console.log(`üî• DEBUGGER API: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª "${character}" (–∫–æ–¥: ${character.charCodeAt(0)}) –Ω–∞ tab ${tabId}`);

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ debugger
      await new Promise((resolve, reject) => {
        chrome.debugger.attach({ tabId }, '1.3', () => {
          if (chrome.runtime.lastError) {
            reject(chrome.runtime.lastError);
          } else {
            resolve();
          }
        });
      });

      console.log('‚úÖ Debugger –ø–æ–¥–∫–ª—é—á–µ–Ω');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û keyDown –∏ keyUp (–ë–ï–ó char!)
      await new Promise((resolve, reject) => {
        chrome.debugger.sendCommand({ tabId }, 'Input.dispatchKeyEvent', {
          type: 'keyDown',
          text: character,
          key: character,
          code: `Key${character.toUpperCase()}`,
          windowsVirtualKeyCode: character.toUpperCase().charCodeAt(0),
          nativeVirtualKeyCode: character.toUpperCase().charCodeAt(0),
          isKeypad: false
        }, (result) => {
          if (chrome.runtime.lastError) {
            reject(chrome.runtime.lastError);
          } else {
            console.log(`üì§ keyDown –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è "${character}"`);
            resolve(result);
          }
        });
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º keyUp
      await new Promise((resolve, reject) => {
        chrome.debugger.sendCommand({ tabId }, 'Input.dispatchKeyEvent', {
          type: 'keyUp',
          text: character,
          key: character,
          code: `Key${character.toUpperCase()}`,
          windowsVirtualKeyCode: character.toUpperCase().charCodeAt(0),
          nativeVirtualKeyCode: character.toUpperCase().charCodeAt(0),
          isKeypad: false
        }, (result) => {
          if (chrome.runtime.lastError) {
            reject(chrome.runtime.lastError);
          } else {
            console.log(`üì§ keyUp –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è "${character}"`);
            resolve(result);
          }
        });
      });

      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç debugger
      chrome.debugger.detach({ tabId }, () => {
        console.log('‚úÖ Debugger –æ—Ç–∫–ª—é—á–µ–Ω');
      });

      console.log(`üî• –°–ò–ú–í–û–õ "${character}" –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ü–†–ê–í–õ–ï–ù!`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Debugger API:', error);

      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      chrome.debugger.detach({ tabId }, () => { });

      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
   */
  handleNextGameStarted() {
    console.log('Background: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã');

    if (this.state.isRunning) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ popup
      this.sendToPopup({
        type: 'PROGRESS_UPDATE',
        currentGame: this.state.currentGame,
        totalGames: this.state.totalGames,
        status: `–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ ${this.state.currentGame} –∏–∑ ${this.state.totalGames}`
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  handleAutomationRestoreReady(message) {
    console.log('Background: Content script –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');

    this.state.currentGame = message.currentGame;
    this.state.totalGames = message.totalGames;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ popup
    this.sendToPopup({
      type: 'PROGRESS_UPDATE',
      currentGame: this.state.currentGame,
      totalGames: this.state.totalGames,
      status: `–ù–∞—á–∞–ª–∏ –∏–≥—Ä—É ${this.state.currentGame} –∏–∑ ${this.state.totalGames}`
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  handleAutomationError(message) {
    console.error('Background: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', message.error);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    this.state.isRunning = false;

    // –£–≤–µ–¥–æ–º–ª—è–µ–º popup –æ–± –æ—à–∏–±–∫–µ
    this.sendToPopup({
      type: 'AUTOMATION_ERROR',
      error: message.error,
      currentGame: message.currentGame || this.state.currentGame
    });

    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    chrome.storage.local.remove('gameState');
  }

  /**
   * –û–¢–ü–†–ê–í–õ–Ø–ï–¢ BACKSPACE –ß–ï–†–ï–ó DEBUGGER API
   */
  async handleTypeBackspace(tabId) {
    try {
      console.log(`üîô DEBUGGER API: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Backspace –Ω–∞ tab ${tabId}`);

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ debugger
      await new Promise((resolve, reject) => {
        chrome.debugger.attach({ tabId }, '1.3', () => {
          if (chrome.runtime.lastError) {
            reject(chrome.runtime.lastError);
          } else {
            resolve();
          }
        });
      });

      console.log('‚úÖ Debugger –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è Backspace');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º keyDown –¥–ª—è Backspace
      await new Promise((resolve, reject) => {
        chrome.debugger.sendCommand({ tabId }, 'Input.dispatchKeyEvent', {
          type: 'keyDown',
          key: 'Backspace',
          code: 'Backspace',
          windowsVirtualKeyCode: 8,
          nativeVirtualKeyCode: 8,
          isKeypad: false
        }, (result) => {
          if (chrome.runtime.lastError) {
            reject(chrome.runtime.lastError);
          } else {
            console.log('üì§ Backspace keyDown –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            resolve(result);
          }
        });
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º keyUp –¥–ª—è Backspace
      await new Promise((resolve, reject) => {
        chrome.debugger.sendCommand({ tabId }, 'Input.dispatchKeyEvent', {
          type: 'keyUp',
          key: 'Backspace',
          code: 'Backspace',
          windowsVirtualKeyCode: 8,
          nativeVirtualKeyCode: 8,
          isKeypad: false
        }, (result) => {
          if (chrome.runtime.lastError) {
            reject(chrome.runtime.lastError);
          } else {
            console.log('üì§ Backspace keyUp –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            resolve(result);
          }
        });
      });

      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç debugger
      chrome.debugger.detach({ tabId }, () => {
        console.log('‚úÖ Debugger –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ Backspace');
      });

      console.log('üîô BACKSPACE —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Backspace Debugger API:', error);

      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      chrome.debugger.detach({ tabId }, () => { });

      throw error;
    }
  }
}

// Initialize background controller
const backgroundController = new BackgroundController();