/**
 * –ú–û–î–£–õ–¨ –ü–ï–ß–ê–¢–ò –î–õ–Ø SPRITETYPE.IRYS.XYZ
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—á–∞—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ Chrome Debugger API
 * –° –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
 */

class TypingEngine {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏–ø–∏–Ω–≥–∞
        this.typingState = {
            isRunning: false,
            currentWordIndex: 0,
            currentCharIndex: 0,
            wordsToType: []
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∏
        this.humanSettings = {
            // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏)
            baseSpeed: 120,
            speedVariation: 80,  // –í–∞—Ä–∏–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ ¬±80ms
            
            // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫
            errorRate: 0.03,     // 3% –æ—à–∏–±–æ–∫
            doubleKeyRate: 0.01, // 1% –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
            
            // –ü–∞—É–∑—ã
            wordPause: { min: 200, max: 500 },      // –ú–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
            sentencePause: { min: 800, max: 1200 }, // –ü–æ—Å–ª–µ —Ç–æ—á–µ–∫
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)
            slowCharacters: ['.', ',', '!', '?', ';', ':', '-', '_', '(', ')', '"', "'"],
            slowCharacterMultiplier: 1.5,
            
            // –ß–∞—Å—Ç–æ –æ—à–∏–±–æ—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±—É–∫–≤
            errorProneChars: ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—á–∞—Ç—å –≤—Å–µ—Ö —Å–ª–æ–≤
     */
    async startTyping(words, settings = {}) {
        if (this.typingState.isRunning) {
            console.log('‚ö†Ô∏è –ü–µ—á–∞—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
            return;
        }

        console.log(`üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –ø–µ—á–∞—Ç–∏ ${words.length} —Å–ª–æ–≤`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if (settings.naturalness) {
            Object.assign(this.humanSettings, settings.naturalness);
        }
        if (settings.humanTyping) {
            Object.assign(this.humanSettings, settings.humanTyping);
        }

        console.log('üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ—Å—Ç–∏:', this.humanSettings);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.typingState.isRunning = true;
        this.typingState.currentWordIndex = 0;
        this.typingState.currentCharIndex = 0;
        this.typingState.wordsToType = words;
        this.typingState.forceStopped = false; // –§–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—á–∞—Ç—å –≤—Å–µ—Ö —Å–ª–æ–≤
            await this.typeAllWords(words);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏:', error);
            this.stopTyping();
            throw error;
        }
    }

    /**
     * –ü–µ—á–∞—Ç–∞–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–¥—Ä—è–¥ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
     */
    async typeAllWords(words) {
        console.log(`‚å®Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—É—é –ø–µ—á–∞—Ç—å ${words.length} —Å–ª–æ–≤`);
        
        for (let wordIndex = 0; wordIndex < words.length; wordIndex++) {
            if (!this.typingState.isRunning || this.typingState.forceStopped) {
                console.log('üõë –ü–µ—á–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                break;
            }
            
            const word = words[wordIndex];
            console.log(`üìù –ü–µ—á–∞—Ç–∞–µ–º —Å–ª–æ–≤–æ ${wordIndex + 1}/${words.length}: "${word}"`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.typingState.currentWordIndex = wordIndex;
            this.typingState.currentCharIndex = 0;
            
            // –ü–µ—á–∞—Ç–∞–µ–º —Å–ª–æ–≤–æ —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ—Å—Ç—å—é
            await this.typeWordNaturally(word);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if (wordIndex < words.length - 1) {
                await this.typeCharacter(' ');
                await this.naturalPause('word');
            }
        }
        
        console.log('‚úÖ –í–°–ï –°–õ–û–í–ê –Ω–∞–ø–µ—á–∞—Ç–∞–Ω—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ!');
        this.stopTyping();
    }

    /**
     * –ü–µ—á–∞—Ç–∞–µ—Ç —Å–ª–æ–≤–æ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
     */
    async typeWordNaturally(word) {
        console.log(`üë§ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—É—é –ø–µ—á–∞—Ç—å —Å–ª–æ–≤–∞ "${word}"`);
        
        for (let i = 0; i < word.length; i++) {
            if (!this.typingState.isRunning || this.typingState.forceStopped) {
                break;
            }
            
            const char = word[i];
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            if (Math.random() < this.humanSettings.errorRate) {
                await this.makeTypingError(char);
            }
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
            if (Math.random() < this.humanSettings.doubleKeyRate) {
                await this.typeCharacter(char);
                await this.naturalPause('double');
                await this.typeBackspace();
                await this.naturalPause('correction');
            }
            
            // –ü–µ—á–∞—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
            await this.typeCharacter(char);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.typingState.currentCharIndex = i + 1;
            
            // –ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∏–º–≤–æ–ª–æ–º
            if (i < word.length - 1) {
                await this.naturalPause('character', char);
            }
        }
        
        console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ`);
    }

    /**
     * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø–µ—á–∞—Ç–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
     */
    async makeTypingError(correctChar) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        const wrongChar = this.getRandomWrongChar(correctChar);
        
        console.log(`üö´ –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É: "${wrongChar}" –≤–º–µ—Å—Ç–æ "${correctChar}"`);
        
        // –ü–µ—á–∞—Ç–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        await this.typeCharacter(wrongChar);
        
        // –ü–∞—É–∑–∞ –Ω–∞ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await this.naturalPause('error_realization');
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        await this.typeBackspace();
        await this.naturalPause('correction');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
     */
    getRandomWrongChar(correctChar) {
        const keyboard = 'qwertyuiopasdfghjklzxcvbnm';
        const currentIndex = keyboard.indexOf(correctChar.toLowerCase());
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        const neighbors = [];
        if (currentIndex > 0) neighbors.push(keyboard[currentIndex - 1]);
        if (currentIndex < keyboard.length - 1) neighbors.push(keyboard[currentIndex + 1]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        neighbors.push(...'tyuiop'.split(''));
        
        return neighbors[Math.floor(Math.random() * neighbors.length)] || 'x';
    }

    /**
     * –ü–µ—á–∞—Ç–∞–µ—Ç backspace –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
     */
    async typeBackspace() {
        console.log('‚¨ÖÔ∏è –ü–µ—á–∞—Ç–∞–µ–º backspace –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
        
        return new Promise((resolve) => {
            chrome.runtime.sendMessage({
                type: 'TYPE_BACKSPACE'
            }, (response) => {
                resolve();
            });
        });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –ø–∞—É–∑—ã —Ä–∞–∑–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async naturalPause(type, character = null) {
        let pauseTime;
        
        switch (type) {
            case 'character':
                pauseTime = this.calculateCharacterPause(character);
                break;
                
            case 'word':
                pauseTime = this.randomBetween(
                    this.humanSettings.wordPause.min,
                    this.humanSettings.wordPause.max
                );
                break;
                
            case 'sentence':
                pauseTime = this.randomBetween(
                    this.humanSettings.sentencePause.min,
                    this.humanSettings.sentencePause.max
                );
                break;
                
            case 'error_realization':
                pauseTime = this.randomBetween(300, 800);
                break;
                
            case 'correction':
                pauseTime = this.randomBetween(200, 400);
                break;
                
            case 'double':
                pauseTime = this.randomBetween(50, 150);
                break;
                
            default:
                pauseTime = this.humanSettings.baseSpeed;
        }
        
        if (pauseTime > 0) {
            await this.delay(pauseTime);
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–∞—É–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
     */
    calculateCharacterPause(character) {
        let basePause = this.humanSettings.baseSpeed;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏
        const variation = (Math.random() - 0.5) * this.humanSettings.speedVariation;
        basePause += variation;
        
        // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if (character && this.humanSettings.slowCharacters.includes(character)) {
            basePause *= this.humanSettings.slowCharacterMultiplier;
        }
        
        // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if (character && ['.', '!', '?'].includes(character)) {
            return this.randomBetween(
                this.humanSettings.sentencePause.min,
                this.humanSettings.sentencePause.max
            );
        }
        
        return Math.max(basePause, 50); // –ú–∏–Ω–∏–º—É–º 50ms
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É min –∏ max
     */
    randomBetween(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    /**
     * –ü–µ—á–∞—Ç–∞–µ—Ç –æ–¥–Ω—É –±—É–∫–≤—É —á–µ—Ä–µ–∑ Chrome Debugger API
     */
    async typeCharacter(char) {
        console.log(`üî§ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–ò–ú–í–û–õ: "${char}" (–∫–æ–¥: ${char.charCodeAt(0)})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ background –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è debugger API
        return new Promise((resolve) => {
            chrome.runtime.sendMessage({
                type: 'TYPE_CHARACTER',
                character: char
            }, (response) => {
                if (response && response.success) {
                    console.log(`‚úÖ –°–∏–º–≤–æ–ª "${char}" –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Debugger API`);
                } else {
                    console.log(`‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞ "${char}":`, response?.error);
                }
                resolve();
            });
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
     */
    getKeyCode(char) {
        if (char === ' ') return 'Space';
        if (char >= 'a' && char <= 'z') return `Key${char.toUpperCase()}`;
        if (char >= 'A' && char <= 'Z') return `Key${char}`;
        if (char >= '0' && char <= '9') return `Digit${char}`;
        
        const specialKeys = {
            '.': 'Period', ',': 'Comma', '!': 'Digit1', '?': 'Slash',
            ';': 'Semicolon', ':': 'Semicolon', '-': 'Minus', '_': 'Minus',
            "'": 'Quote', '"': 'Quote', '(': 'Digit9', ')': 'Digit0'
        };
        
        return specialKeys[char] || 'Unknown';
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—á–∞—Ç—å
     */
    stopTyping(reason = 'manual') {
        console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—á–∞—Ç–∏ (–ø—Ä–∏—á–∏–Ω–∞: ${reason})`);
        this.typingState.isRunning = false;
        this.typingState.currentWordIndex = 0;
        this.typingState.currentCharIndex = 0;
        this.typingState.wordsToType = [];
        
        if (reason === 'game_end') {
            this.typingState.forceStopped = true;
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—á–∞—Ç—å (–ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã)
     */
    forceStop() {
        console.log('üèÅ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ü–ï–ß–ê–¢–ò - –ò–ì–†–ê –ó–ê–ö–û–ù–ß–ï–ù–ê!');
        this.typingState.forceStopped = true;
        this.stopTyping('game_end');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –ø–µ—á–∞—Ç—å
     */
    isRunning() {
        return this.typingState.isRunning;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—á–∞—Ç–∏
     */
    getState() {
        return { ...this.typingState };
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.TypingEngine = TypingEngine;
