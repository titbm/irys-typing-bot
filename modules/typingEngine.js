/**
 * –ú–û–î–£–õ–¨ –ü–ï–ß–ê–¢–ò –î–õ–Ø SPRITETYPE.IRYS.XYZ
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—á–∞—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ Chrome Debugger API
 */

class TypingEngine {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏–ø–∏–Ω–≥–∞
        this.typingState = {
            isRunning: false,
            currentWordIndex: 0,
            currentCharIndex: 0,
            wordsToType: []
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—á–∞—Ç—å –≤—Å–µ—Ö —Å–ª–æ–≤
     */
    async startTyping(words) {
        if (this.typingState.isRunning) {
            console.log('‚ö†Ô∏è –ü–µ—á–∞—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
            return;
        }

        console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—á–∞—Ç–∏ ${words.length} —Å–ª–æ–≤`);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.typingState.isRunning = true;
        this.typingState.currentWordIndex = 0;
        this.typingState.currentCharIndex = 0;
        this.typingState.wordsToType = words;
        
        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—á–∞—Ç—å –≤—Å–µ—Ö —Å–ª–æ–≤
            await this.typeAllWords(words);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏:', error);
            this.stopTyping();
            throw error;
        }
    }

    /**
     * –ü–µ—á–∞—Ç–∞–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–¥—Ä—è–¥ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
     */
    async typeAllWords(words) {
        console.log(`‚å®Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç—å ${words.length} —Å–ª–æ–≤`);
        
        for (let wordIndex = 0; wordIndex < words.length; wordIndex++) {
            if (!this.typingState.isRunning) {
                console.log('üõë –ü–µ—á–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                break;
            }
            
            const word = words[wordIndex];
            console.log(`üìù –ü–µ—á–∞—Ç–∞–µ–º —Å–ª–æ–≤–æ ${wordIndex + 1}/${words.length}: "${word}"`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.typingState.currentWordIndex = wordIndex;
            this.typingState.currentCharIndex = 0;
            
            // –ü–µ—á–∞—Ç–∞–µ–º —Å–ª–æ–≤–æ –ø–æ –±—É–∫–≤–∞–º
            await this.typeWordByChar(word);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if (wordIndex < words.length - 1) {
                console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏');
                await this.typeCharacter(' ');
                await this.delay(500); // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
            }
        }
        
        console.log('‚úÖ –í–°–ï –°–õ–û–í–ê –Ω–∞–ø–µ—á–∞—Ç–∞–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é!');
        this.stopTyping();
    }

    /**
     * –ü–µ—á–∞—Ç–∞–µ—Ç —Å–ª–æ–≤–æ –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ –∑–∞ —Ä–∞–∑
     */
    async typeWordByChar(word) {
        console.log(`‚å®Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç—å —Å–ª–æ–≤–∞ "${word}" –ø–æ –±—É–∫–≤–∞–º`);
        
        for (let i = 0; i < word.length; i++) {
            if (!this.typingState.isRunning) {
                console.log('üõë –ü–µ—á–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                break;
            }
            
            const char = word[i];
            console.log(`üìù –ü–µ—á–∞—Ç–∞–µ–º –±—É–∫–≤—É: "${char}" (${i + 1}/${word.length})`);
            
            // –ü–µ—á–∞—Ç–∞–µ–º –±—É–∫–≤—É —á–µ—Ä–µ–∑ keyboard events
            await this.typeCharacter(char);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.typingState.currentCharIndex = i + 1;
            
            // –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏
            if (i < word.length - 1) {
                console.log('‚è≥ –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É...');
                await this.delay(1000);
            }
        }
        
        console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é`);
    }

    /**
     * –ü–µ—á–∞—Ç–∞–µ—Ç –æ–¥–Ω—É –±—É–∫–≤—É —á–µ—Ä–µ–∑ Chrome Debugger API
     */
    async typeCharacter(char) {
        console.log(`üî§ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–ò–ú–í–û–õ: "${char}" (–∫–æ–¥: ${char.charCodeAt(0)})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ background –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è debugger API
        return new Promise((resolve) => {
            chrome.runtime.sendMessage({
                type: 'TYPE_CHARACTER',
                character: char
            }, (response) => {
                if (response && response.success) {
                    console.log(`‚úÖ –°–∏–º–≤–æ–ª "${char}" –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Debugger API`);
                } else {
                    console.log(`‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞ "${char}":`, response?.error);
                }
                resolve();
            });
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
     */
    getKeyCode(char) {
        if (char === ' ') return 'Space';
        if (char >= 'a' && char <= 'z') return `Key${char.toUpperCase()}`;
        if (char >= 'A' && char <= 'Z') return `Key${char}`;
        if (char >= '0' && char <= '9') return `Digit${char}`;
        
        const specialKeys = {
            '.': 'Period', ',': 'Comma', '!': 'Digit1', '?': 'Slash',
            ';': 'Semicolon', ':': 'Semicolon', '-': 'Minus', '_': 'Minus',
            "'": 'Quote', '"': 'Quote', '(': 'Digit9', ')': 'Digit0'
        };
        
        return specialKeys[char] || 'Unknown';
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—á–∞—Ç—å
     */
    stopTyping() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—á–∞—Ç–∏');
        this.typingState.isRunning = false;
        this.typingState.currentWordIndex = 0;
        this.typingState.currentCharIndex = 0;
        this.typingState.wordsToType = [];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –ø–µ—á–∞—Ç—å
     */
    isRunning() {
        return this.typingState.isRunning;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—á–∞—Ç–∏
     */
    getState() {
        return { ...this.typingState };
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.TypingEngine = TypingEngine;
