/**
 * –ú–û–î–£–õ–¨ –ü–ê–†–°–ò–ù–ì–ê –°–õ–û–í –î–õ–Ø SPRITETYPE.IRYS.XYZ
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */

class WordParser {
    constructor() {
        this.gameSelectors = {
            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–≥—Ä–æ–π
            gameContainer: 'main .relative.flex.items-center.justify-start',
            // –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ (–±–µ–ª–æ–µ, –∫—Ä—É–ø–Ω–æ–µ)
            currentWord: 'div.text-4xl.font-medium.text-white',
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (—Å–µ—Ä—ã–µ, –º–µ–ª–∫–∏–µ)
            nextWords: 'div.text-3xl.font-medium',
            // –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            input: 'input[type="text"]',
            // –ö–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            timeButtons: 'button'
        };
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–≥—Ä–æ–π
     */
    findGameContainer() {
        const container = document.querySelector(this.gameSelectors.gameContainer);
        if (!container) {
            throw new Error('–ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        return container;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
     */
    parseWords() {
        const gameContainer = this.findGameContainer();
        const words = [];
        
        // 1. –ò—â–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ (–±–µ–ª–æ–µ)
        const currentWordElement = gameContainer.querySelector(this.gameSelectors.currentWord);
        if (currentWordElement) {
            const currentText = this.extractWordText(currentWordElement);
            if (currentText) {
                words.push({
                    text: currentText,
                    type: 'current',
                    element: currentWordElement
                });
            }
        }
        
        // 2. –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–∞ (—Å–µ—Ä—ã–µ)
        const nextWordElements = gameContainer.querySelectorAll(this.gameSelectors.nextWords);
        nextWordElements.forEach(element => {
            const text = this.extractWordText(element);
            if (text && text.length > 2) {
                words.push({
                    text: text,
                    type: 'next',
                    element: element
                });
            }
        });
        
        return words;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ª–æ–≤–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ
     */
    extractWordText(element) {
        const text = element.textContent?.trim();
        if (!text) return null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
        if (!/^[a-zA-Z]+$/.test(text)) return null;
        if (text.length < 1 || text.length > 25) return null;
        
        return text;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
     */
    findInput() {
        const input = document.querySelector(this.gameSelectors.input);
        if (!input) {
            throw new Error('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        return input;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
     */
    findTimeButtons() {
        const buttons = Array.from(document.querySelectorAll(this.gameSelectors.timeButtons));
        return buttons.filter(btn => {
            const text = btn.textContent?.trim();
            return text && /^(15|30|60|120)$/.test(text);
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–∏
     */
    setTimeMode(seconds) {
        console.log(`‚è±Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º ${seconds} —Å–µ–∫—É–Ω–¥`);
        
        try {
            const buttons = this.findTimeButtons();
            const targetButton = buttons.find(btn => 
                btn.textContent?.trim() === seconds.toString()
            );
            
            if (targetButton) {
                targetButton.click();
                console.log(`‚úÖ –†–µ–∂–∏–º ${seconds} —Å–µ–∫—É–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
                return true;
            } else {
                console.log(`‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ ${seconds} —Å–µ–∫—É–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return false;
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:', error.message);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏
     */
    getWordsToType() {
        const words = this.parseWords();
        return words.map(w => w.text);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—á–∞—Ç–∏
     */
    getCurrentWord() {
        const words = this.parseWords();
        const currentWord = words.find(w => w.type === 'current');
        return currentWord ? currentWord.text : null;
    }

    /**
     * –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
     */
    getGameState() {
        return {
            words: this.parseWords(),
            currentWord: this.getCurrentWord(),
            totalWords: this.parseWords().length,
            input: this.findInput(),
            timeButtons: this.findTimeButtons().map(btn => btn.textContent?.trim())
        };
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä
     */
    testParser() {
        console.log('üß™ === –¢–ï–°–¢–ò–†–£–ï–ú –ü–ê–†–°–ï–† ===');
        
        try {
            // –¢–µ—Å—Ç 1: –ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const gameContainer = this.findGameContainer();
            console.log('‚úÖ –ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω:', !!gameContainer);
            
            // –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–º —Å–ª–æ–≤–∞
            const words = this.parseWords();
            console.log('‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ —Å–ª–æ–≤:', words.length);
            console.log('üìù –°–ª–æ–≤–∞:', words.map(w => `${w.text}(${w.type})`).join(', '));
            
            // –¢–µ—Å—Ç 3: –ü–æ–ª–µ –≤–≤–æ–¥–∞
            const input = this.findInput();
            console.log('‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ:', !!input);
            console.log('üì± Input –∫–ª–∞—Å—Å:', input?.className || '–ù–ï–¢');
            
            // –¢–µ—Å—Ç 4: –ö–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            const timeButtons = this.findTimeButtons();
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:', timeButtons.map(b => b.textContent?.trim()));
            
            // –¢–µ—Å—Ç 5: –ü–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            const gameState = this.getGameState();
            console.log('üéÆ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:', {
                totalWords: gameState.totalWords,
                currentWord: gameState.currentWord,
                hasInput: !!gameState.input
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:', error.message);
        }
        
        console.log('üß™ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.WordParser = WordParser;
