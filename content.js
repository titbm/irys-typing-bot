/**
 * –ì–õ–ê–í–ù–´–ô –ö–û–û–†–î–ò–ù–ê–¢–û–† –î–õ–Ø SPRITETYPE.IRYS.XYZ
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–∞—Ä—Å–µ—Ä —Å–ª–æ–≤ –∏ –¥–≤–∏–∂–æ–∫ –ø–µ—á–∞—Ç–∏
 */

console.log('üéØ SpriteType Parser –∑–∞–≥—Ä—É–∂–µ–Ω');

class SpriteTypeParser {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        this.wordParser = new WordParser();
        this.typingEngine = new TypingEngine();
        
        this.initialize();
    }

    initialize() {
        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SpriteTypeParser');
        
        if (!window.location.href.includes('spritetype.irys.xyz')) {
            console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∞–π—Ç');
            return;
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => this.wordParser.testParser(), 2000);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        this.setupMessageHandlers();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤ background
        this.sendMessage('CONTENT_READY');
        
        console.log('‚úÖ SpriteTypeParser –≥–æ—Ç–æ–≤');
    }

    sendMessage(type, data = {}) {
        chrome.runtime.sendMessage({ type, ...data }, (response) => {
            if (chrome.runtime.lastError) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', chrome.runtime.lastError);
            }
        });
    }

    setupMessageHandlers() {
        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.type);
            
            switch (message.type) {
                case 'START_AUTOMATION':
                    this.startAutomation(message.settings);
                    sendResponse({ success: true });
                    break;
                    
                case 'STOP_AUTOMATION':
                    this.stopAutomation();
                    sendResponse({ success: true });
                    break;
                    
                default:
                    console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
            }
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—á–∞—Ç—å
     */
    async startAutomation(settings) {
        if (this.typingEngine.isRunning()) {
            console.log('‚ö†Ô∏è –ü–µ—á–∞—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
            return;
        }

        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—á–∞—Ç–∏');
        
        try {
            // –ü–∞—Ä—Å–∏–º —Å–ª–æ–≤–∞
            const words = this.wordParser.parseWords();
            if (words.length === 0) {
                throw new Error('–°–ª–æ–≤–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            // –ë–µ—Ä–µ–º –í–°–ï —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏
            const allWordsText = words.map(w => w.text);
            console.log(`üìù –ë—É–¥–µ–º –ø–µ—á–∞—Ç–∞—Ç—å –í–°–ï —Å–ª–æ–≤–∞: ${allWordsText.join(', ')}`);
            console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ${allWordsText.length}`);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫
            await this.typingEngine.startTyping(allWordsText);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—á–∞—Ç–∏:', error);
            this.stopAutomation();
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
     */
    stopAutomation() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
        this.typingEngine.stopTyping();
    }

    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–µ—Ä–∞
    parseWords() {
        return this.wordParser.parseWords();
    }

    getGameState() {
        return this.wordParser.getGameState();
    }

    getCurrentWord() {
        return this.wordParser.getCurrentWord();
    }

    getWordsToType() {
        return this.wordParser.getWordsToType();
    }

    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –¥–≤–∏–∂–∫–∞ –ø–µ—á–∞—Ç–∏
    getTypingState() {
        return this.typingEngine.getState();
    }

    isTyping() {
        return this.typingEngine.isRunning();
    }
}

// –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
const parser = new SpriteTypeParser();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.parser = parser;
window.spriteTypeParser = parser;
